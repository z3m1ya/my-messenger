// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetChatsHandlerFunc turns a function with the right signature into a get chats handler
type GetChatsHandlerFunc func(GetChatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetChatsHandlerFunc) Handle(params GetChatsParams) middleware.Responder {
	return fn(params)
}

// GetChatsHandler interface for that can handle valid get chats params
type GetChatsHandler interface {
	Handle(GetChatsParams) middleware.Responder
}

// NewGetChats creates a new http.Handler for the get chats operation
func NewGetChats(ctx *middleware.Context, handler GetChatsHandler) *GetChats {
	return &GetChats{Context: ctx, Handler: handler}
}

/*
	GetChats swagger:route GET /chats getChats

Get list of chats
*/
type GetChats struct {
	Context *middleware.Context
	Handler GetChatsHandler
}

func (o *GetChats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetChatsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetChatsOKBodyItems0 get chats o k body items0
//
// swagger:model GetChatsOKBodyItems0
type GetChatsOKBodyItems0 struct {

	// chat Id
	ChatID string `json:"chatId,omitempty"`

	// participants
	Participants []string `json:"participants"`
}

// Validate validates this get chats o k body items0
func (o *GetChatsOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get chats o k body items0 based on context it is used
func (o *GetChatsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetChatsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetChatsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetChatsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
