// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewPatchProfileIDFriendRequestsTargetIDParams creates a new PatchProfileIDFriendRequestsTargetIDParams object
//
// There are no default values defined in the spec.
func NewPatchProfileIDFriendRequestsTargetIDParams() PatchProfileIDFriendRequestsTargetIDParams {

	return PatchProfileIDFriendRequestsTargetIDParams{}
}

// PatchProfileIDFriendRequestsTargetIDParams contains all the bound params for the patch profile ID friend requests target ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters PatchProfileIDFriendRequestsTargetID
type PatchProfileIDFriendRequestsTargetIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	Action *string
	/*
	  Required: true
	  In: path
	*/
	ID string
	/*
	  Required: true
	  In: path
	*/
	TargetID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPatchProfileIDFriendRequestsTargetIDParams() beforehand.
func (o *PatchProfileIDFriendRequestsTargetIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAction, qhkAction, _ := qs.GetOK("action")
	if err := o.bindAction(qAction, qhkAction, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	rTargetID, rhkTargetID, _ := route.Params.GetOK("targetId")
	if err := o.bindTargetID(rTargetID, rhkTargetID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAction binds and validates parameter Action from query.
func (o *PatchProfileIDFriendRequestsTargetIDParams) bindAction(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Action = &raw

	if err := o.validateAction(formats); err != nil {
		return err
	}

	return nil
}

// validateAction carries on validations for parameter Action
func (o *PatchProfileIDFriendRequestsTargetIDParams) validateAction(formats strfmt.Registry) error {

	if err := validate.EnumCase("action", "query", *o.Action, []interface{}{"accept", "reject"}, true); err != nil {
		return err
	}

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *PatchProfileIDFriendRequestsTargetIDParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}

// bindTargetID binds and validates parameter TargetID from path.
func (o *PatchProfileIDFriendRequestsTargetIDParams) bindTargetID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.TargetID = raw

	return nil
}
