// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteProfileIDFriendsTargetIDHandlerFunc turns a function with the right signature into a delete profile ID friends target ID handler
type DeleteProfileIDFriendsTargetIDHandlerFunc func(DeleteProfileIDFriendsTargetIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteProfileIDFriendsTargetIDHandlerFunc) Handle(params DeleteProfileIDFriendsTargetIDParams) middleware.Responder {
	return fn(params)
}

// DeleteProfileIDFriendsTargetIDHandler interface for that can handle valid delete profile ID friends target ID params
type DeleteProfileIDFriendsTargetIDHandler interface {
	Handle(DeleteProfileIDFriendsTargetIDParams) middleware.Responder
}

// NewDeleteProfileIDFriendsTargetID creates a new http.Handler for the delete profile ID friends target ID operation
func NewDeleteProfileIDFriendsTargetID(ctx *middleware.Context, handler DeleteProfileIDFriendsTargetIDHandler) *DeleteProfileIDFriendsTargetID {
	return &DeleteProfileIDFriendsTargetID{Context: ctx, Handler: handler}
}

/*
	DeleteProfileIDFriendsTargetID swagger:route DELETE /profile/{id}/friends/{targetId} deleteProfileIdFriendsTargetId

Remove friend
*/
type DeleteProfileIDFriendsTargetID struct {
	Context *middleware.Context
	Handler DeleteProfileIDFriendsTargetIDHandler
}

func (o *DeleteProfileIDFriendsTargetID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteProfileIDFriendsTargetIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
